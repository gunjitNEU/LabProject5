/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import dao.DoctorDao;
import dao.HospitalDao;
import java.awt.Color;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Doctor;
import model.table.DoctorModel;
import model.Person;
import model.Hospital;
import utill.Patterns;
import utill.SimpleDocumentListener;

/**
 *
 * @author gunjitarora
 */
public class DoctorCRUD extends javax.swing.JPanel {

    /**
     * Creates new form DcotorCRUD
     */
    DoctorDao dd;
    HospitalDao hd;
    ArrayList<Hospital> hospitalList;

    public DoctorCRUD() {
        initComponents();

        dd = new DoctorDao();
        hd = new HospitalDao();
        hospitalList = hd.getAll();
        doctorTable.setModel(new DoctorModel(dd.getAll()));
        genderComboBox.setModel(new DefaultComboBoxModel<>(Person.Gender.values()));
        hospitalComboBox.setModel(new DefaultComboBoxModel<>(hospitalList.toArray(new Hospital[0])));

        firstNameField.getDocument().addDocumentListener((SimpleDocumentListener) e -> {
            if (Pattern.matches(Patterns.alpabetPattern, firstNameField.getText())) {
                firstNameField.setForeground(Color.black);
            } else {
                firstNameField.setForeground(Color.red);
            }
        });
        lastNameField.getDocument().addDocumentListener((SimpleDocumentListener) e -> {
            if (Pattern.matches(Patterns.alpabetPattern, lastNameField.getText())) {
                lastNameField.setForeground(Color.black);
            } else {
                lastNameField.setForeground(Color.red);
            }
        });
        emailField.getDocument().addDocumentListener((SimpleDocumentListener) e -> {
            if (Pattern.matches(Patterns.emailPattern, emailField.getText())) {
                emailField.setForeground(Color.black);
            } else {
                emailField.setForeground(Color.red);
            }
        });
        phoneField.getDocument().addDocumentListener((SimpleDocumentListener) e -> {
            if (Pattern.matches(Patterns.phonePattern, phoneField.getText())) {
                phoneField.setForeground(Color.black);
            } else {
                phoneField.setForeground(Color.red);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        lastNameField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        firstNameField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        genderComboBox = new javax.swing.JComboBox<>();
        emailField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        hospitalComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        doctorIdField = new javax.swing.JTextField();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        doctorTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(doctorTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Doctor List");

        jLabel2.setText("First Name");

        jLabel3.setText("Last Name:");

        jLabel4.setText("Gender");

        jLabel5.setText("Email:");

        jLabel6.setText("Phone:");

        clearButton.setText("Clear Selection");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Hospital:");

        jLabel8.setText("Doctor Id:");

        doctorIdField.setEditable(false);
        doctorIdField.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(100, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstNameField)
                                    .addComponent(lastNameField)
                                    .addComponent(phoneField)
                                    .addComponent(genderComboBox, 0, 106, Short.MAX_VALUE)
                                    .addComponent(emailField)
                                    .addComponent(hospitalComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doctorIdField)))
                            .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(hospitalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(doctorIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton))
                    .addComponent(jScrollPane1))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (firstNameField.getText().isBlank() || lastNameField.getText().isBlank() || emailField.getText().isBlank() || phoneField.getText().isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "All fields are compulsory",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.alpabetPattern, firstNameField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid First Name",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.alpabetPattern, lastNameField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Last Name",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.emailPattern, emailField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Email",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.phonePattern, phoneField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Phone",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        Doctor d = new Doctor();
        d.setFirstName(firstNameField.getText());
        d.setLastName(lastNameField.getText());
        d.setGender((Person.Gender) genderComboBox.getSelectedItem());
        d.setEmail(emailField.getText());
        d.setPhone(phoneField.getText());
        d.setHospitalId(((Hospital) hospitalComboBox.getSelectedItem()).getHospitalId());
        dd.add(d);
        clearButton.doClick();
        doctorTable.setModel(new DoctorModel(dd.getAll()));
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (doctorTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select doctor from list", "No doctor selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        dd.remove((int) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0));
        doctorTable.setModel(new DoctorModel(dd.getAll()));
        clearButton.doClick();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        firstNameField.setText("");
        lastNameField.setText("");
        emailField.setText("");
        phoneField.setText("");
        doctorIdField.setText("");
        hospitalComboBox.setSelectedIndex(0);
        genderComboBox.setSelectedIndex(0);
        addButton.setEnabled(true);
        updateButton.setEnabled(false);

    }//GEN-LAST:event_clearButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        if (doctorTable.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Please select doctor from list", "No doctor selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Doctor d = dd.get((int) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0));
        firstNameField.setText(d.getFirstName());
        lastNameField.setText(d.getLastName());
        emailField.setText(d.getEmail());
        phoneField.setText(d.getPhone());
        doctorIdField.setText(String.valueOf(d.getDoctorId()));
        hospitalComboBox.setSelectedItem(hospitalList.stream().filter(h -> h.getHospitalId() == d.getHospitalId()).findAny().get());
        genderComboBox.setSelectedItem(d.getGender());
        addButton.setEnabled(false);
        updateButton.setEnabled(true);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (firstNameField.getText().isBlank() || lastNameField.getText().isBlank() || emailField.getText().isBlank() || phoneField.getText().isBlank()) {
            JOptionPane.showMessageDialog(this,
                    "All fields are compulsory",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.alpabetPattern, firstNameField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid First Name",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.alpabetPattern, lastNameField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Last Name",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.emailPattern, emailField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Email",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!Pattern.matches(Patterns.phonePattern, phoneField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Invalid Phone",
                    "Input Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        Doctor d = dd.get((int) doctorTable.getValueAt(doctorTable.getSelectedRow(), 0));
        d.setFirstName(firstNameField.getText());
        d.setLastName(lastNameField.getText());
        d.setGender((Person.Gender) genderComboBox.getSelectedItem());
        d.setEmail(emailField.getText());
        d.setPhone(phoneField.getText());
        d.setHospitalId(((Hospital) hospitalComboBox.getSelectedItem()).getHospitalId());
        dd.update(d);
        clearButton.doClick();
        doctorTable.setModel(new DoctorModel(dd.getAll()));

    }//GEN-LAST:event_updateButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        clearButton.doClick();
        hospitalList = hd.getAll();
        hospitalComboBox.setModel(new DefaultComboBoxModel<>(hospitalList.toArray(new Hospital[0])));

    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField doctorIdField;
    private javax.swing.JTable doctorTable;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JComboBox<Person.Gender> genderComboBox;
    private javax.swing.JComboBox<Hospital> hospitalComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
